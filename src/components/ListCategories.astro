---
import { getCategories } from '@/utils'
import Category from '@/components/Category'
const categories = await getCategories()

const { activeCategory } = Astro.props
---

<div class='relative flex flex-wrap min-w-full items-end justify-between'>
	<Category />
	<div>
		<button
			class='text-black dark:text-white pb-2.5 first-letter:uppercase font-medium hover:text-gray-800 border-b-2 border-black dark:border-white dark:hover:border-white transition-colors duration-150 ease-linear'
			id='categories-menu'
			aria-haspopup='true'
			aria-expanded='false'
		>
			Категории
		</button>
		<div
			id='dropdown-menu'
			class='hidden absolute mt-2 px-4 py-2 rounded-md shadow-2xl ring-black dark:bg-[#0a0910] bg-white !z-[10000] right-0 whitespace-nowrap'
			role='menu'
			aria-orientation='vertical'
			aria-labelledby='categories-menu'
		>
			<div class='gap-2 flex flex-col flex-wrap pb-2 items-end' role='none'>
				{categories.map((category) => <Category name={category} activeCategory={activeCategory} />)}
			</div>
		</div>
	</div>
	<div class='hidden sm:block absolute w-full bottom-0 border-b-2 -z-40 dark:border-gray-600'></div>
</div>

<script>
	{
		const initializeDropdown = () => {
			const menuButton = document.getElementById('categories-menu') as HTMLButtonElement | null
			const dropdownMenu = document.getElementById('dropdown-menu') as HTMLDivElement | null
			let isMouseOverMenu = false
			let touchStartY = 0
			let isTouchMove = false
			const isMobile = () => window.innerWidth < 768
			let isInitialized = false

			if (!menuButton || !dropdownMenu || isInitialized) return
			isInitialized = true

			const showDropdown = () => {
				if (!menuButton || !dropdownMenu) return
				menuButton.setAttribute('aria-expanded', 'true')
				dropdownMenu.classList.remove('hidden')
				requestAnimationFrame(adjustDropdownPosition)
			}

			const hideDropdown = () => {
				if (!menuButton || !dropdownMenu) return
				menuButton.setAttribute('aria-expanded', 'false')
				dropdownMenu.classList.add('hidden')
			}

			const handleMouseEnter = () => {
				if (!isMobile()) {
					isMouseOverMenu = true
					showDropdown()
				}
			}

			const handleMouseLeave = () => {
				if (!isMobile()) {
					isMouseOverMenu = false
					setTimeout(() => {
						if (!isMouseOverMenu) {
							hideDropdown()
						}
					}, 150)
				}
			}

			const handleTouchStart = (e: TouchEvent) => {
				if (isMobile()) {
					touchStartY = e.touches[0].clientY
					isTouchMove = false
				}
			}

			const handleTouchMove = (e: TouchEvent) => {
				if (isMobile()) {
					const touchMoveY = e.touches[0].clientY
					if (Math.abs(touchMoveY - touchStartY) > 10) {
						isTouchMove = true
					}
				}
			}

			const handleClick = (e: Event) => {
				e.preventDefault()
				e.stopPropagation()

				if (isMobile() && e instanceof TouchEvent && isTouchMove) {
					return
				}

				const isExpanded = menuButton?.getAttribute('aria-expanded') === 'true'
				requestAnimationFrame(() => {
					if (isExpanded) {
						hideDropdown()
					} else {
						showDropdown()
					}
				})
			}

			const adjustDropdownPosition = () => {
				if (!menuButton || !dropdownMenu) return

				// Reset any previous positioning
				dropdownMenu.style.right = '0'
				dropdownMenu.style.left = 'auto'
			}

			const setupDesktopInteractions = () => {
				if (isMobile()) return

				menuButton.addEventListener('mouseenter', handleMouseEnter)
				menuButton.addEventListener('mouseleave', handleMouseLeave)
				dropdownMenu.addEventListener('mouseenter', handleMouseEnter)
				dropdownMenu.addEventListener('mouseleave', handleMouseLeave)
			}

			const removeDesktopInteractions = () => {
				menuButton.removeEventListener('mouseenter', handleMouseEnter)
				menuButton.removeEventListener('mouseleave', handleMouseLeave)
				dropdownMenu.removeEventListener('mouseenter', handleMouseEnter)
				dropdownMenu.removeEventListener('mouseleave', handleMouseLeave)
			}

			const handleOutsideClick = (e: Event) => {
				if (!menuButton.contains(e.target as Node) && !dropdownMenu.contains(e.target as Node)) {
					hideDropdown()
				}
			}

			const handleResize = () => {
				if (menuButton?.getAttribute('aria-expanded') === 'true') {
					requestAnimationFrame(adjustDropdownPosition)
				}
				if (isMobile()) {
					removeDesktopInteractions()
				} else {
					setupDesktopInteractions()
				}
			}

			// Initial setup
			menuButton.addEventListener('click', handleClick)
			menuButton.addEventListener('touchstart', handleTouchStart, { passive: true })
			menuButton.addEventListener('touchmove', handleTouchMove, { passive: true })
			window.addEventListener('resize', handleResize)
			document.addEventListener('click', handleOutsideClick)
			setupDesktopInteractions()

			// Cleanup function
			const cleanup = () => {
				menuButton.removeEventListener('click', handleClick)
				menuButton.removeEventListener('touchstart', handleTouchStart)
				menuButton.removeEventListener('touchmove', handleTouchMove)
				window.removeEventListener('resize', handleResize)
				document.removeEventListener('click', handleOutsideClick)
				removeDesktopInteractions()
				isInitialized = false
			}

			return cleanup
		}

		// Initialize on page load
		let cleanup: (() => void) | undefined

		const initialize = () => {
			// Clean up previous instance if exists
			if (cleanup) {
				cleanup()
			}
			cleanup = initializeDropdown()
		}

		initialize()

		// Re-initialize on client-side navigation/updates
		document.addEventListener('astro:page-load', initialize)
	}
</script>
